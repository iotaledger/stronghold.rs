// Copyright 2020 IOTA Stiftung
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.

/// A simple crate to encrypt and decrypt data into snapshot files using sodiumoxide (libsodium).
/// uses the secret stream chacha20poly1305 symmetric encryption algorithm as its default encryption method.
/// The snapshot format is highlighted in the diagram below. Note: there is no password in the snapshot, the data is
/// password encrypted.

//      Document Format
//    +-----------------+
//    | Signature bytes |
//    +=================+
//    | Version bytes   |
//    +=================+
//    | Hashed Salt     |
//    +=================+
//    | Header bytes    |
//    +=================+
//    |    Password     |
//    | Encrypted Data  |
//    +-----------------+

/// Data can be encrypted prior to being put into the snapshot from the system to further secure the snapshot.
/// The snapshot is sealed with a single password which is used to generate a key.  A salt is also generated by
/// libsodium aka Sodium Oxide. The key and salt are used to create the header and a push stream to encrypt the data.
///
/// This process is reversed when decrypting the data.  The header and salt are read from the snapshot file and along
/// with the password they are used to generate a pull stream.  The encrypted data is fed into the pull stream and the
/// data bytes are recovered from the other side.
///
/// The structure of the data is not described in this library.  So long as the data can be converted to a vector of
/// bytes or a slice of bytes, it can be written into the snapshot. Libraries such as serde and bincode can be used to
/// serialize the data into a binary format so that it can be inserted into the encryption stream.  Helper functions for
/// serializing and deserializing HashMaps are included in this library.
mod error;
mod files;
mod logic;
mod serialize;

pub use error::{Error, Result};

pub use files::{home_dir, snapshot_dir};
pub use logic::{decrypt_snapshot, encrypt_snapshot, update_snapshot};
pub use serialize::{deserialize_buffer, serialize_map};
